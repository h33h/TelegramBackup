"""Telegram client initialization and management."""

import os
import qrcode
from telethon import TelegramClient
from telethon.errors import FloodWaitError, SessionPasswordNeededError
from telegram_backup.config import API_ID, API_HASH


def check_session_status(phone_number):
    """Check if a session file exists for the given phone number.
    
    Args:
        phone_number: Phone number to check session for
        
    Returns:
        tuple: (exists: bool, file_path: str, file_size: int or None)
    """
    session_file = f"{phone_number}.session"
    exists = os.path.exists(session_file)
    
    if exists:
        file_size = os.path.getsize(session_file)
        return True, session_file, file_size
    
    return False, session_file, None


async def start_client_with_qr(client, phone_number):
    """Start the Telegram client using QR code authentication.
    
    This method displays a QR code in the terminal that can be scanned
    with the Telegram mobile app to log in without SMS codes.
    
    Args:
        client: TelegramClient instance
        phone_number: Phone number (used for session naming only)
        
    Returns:
        User object representing the logged-in user
        
    Raises:
        Exception: Various connection/authentication errors
    """
    session_file = f"{phone_number}.session"
    session_exists = os.path.exists(session_file)
    
    if session_exists:
        print(f"‚úì –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_file}")
        print("  –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
    else:
        print(f"‚úó –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {session_file}")
        print("  –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
    
    # Connect to Telegram
    await client.connect()
    
    # Check if already authorized
    if await client.is_user_authorized():
        print("‚úì –°–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞! –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        me = await client.get_me()
        print(f"‚úì –í–æ—à–ª–∏ –∫–∞–∫: {me.first_name} {me.last_name or ''} (@{me.username or 'no username'})")
        return me
    
    # Need to authorize with QR code
    print("\n" + "="*70)
    print("QR-–ö–û–î –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø")
    print("="*70)
    print("\nüì± –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ:")
    print("   1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Üí –ü–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
    print("   2. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∏–∂–µ\n")
    
    qr_login = await client.qr_login()
    
    # Generate and display QR code
    def display_qr(url):
        """Display QR code in terminal."""
        qr = qrcode.QRCode(border=2)
        qr.add_data(url)
        qr.make()
        qr.print_ascii(invert=True)
        print(f"\nüîó –ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É: {url}\n")
    
    # Display the initial QR code
    display_qr(qr_login.url)
    
    try:
        # Wait for QR code to be scanned
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞...")
        print("   (QR-–∫–æ–¥ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)\n")
        
        # This will wait until QR is scanned or regenerate it if it expires
        me = await qr_login.wait()
        
        print("\n" + "="*70)
        print("‚úì –£–°–ü–ï–®–ù–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ß–ï–†–ï–ó QR-–ö–û–î!")
        print("="*70)
        
        return me
        
    except SessionPasswordNeededError:
        print("\n‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (2FA)")
        password = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å 2FA: ")
        await client.sign_in(password=password)
        me = await client.get_me()
        return me


def create_client(phone_number):
    """Create and return a Telegram client.
    
    Uses the same session file for each phone number to avoid re-authentication.
    Telethon handles concurrent access to session files safely through file locking.
    
    Args:
        phone_number: Phone number for authentication
        
    Returns:
        TelegramClient instance with consistent session name
    """
    # Use phone number directly as session name for reusability
    # This allows multiple parallel processes to share the same authenticated session
    session_name = str(phone_number)
    
    client = TelegramClient(session_name, API_ID, API_HASH, receive_updates=False)
    return client


async def start_client(client, phone_number):
    """Start the Telegram client and authenticate.
    
    Intelligently handles session management:
    - Checks if valid session already exists
    - Only prompts for authentication if needed
    - Provides clear feedback about session status
    
    Args:
        client: TelegramClient instance
        phone_number: Phone number for authentication
        
    Returns:
        User object representing the logged-in user
        
    Raises:
        FloodWaitError: When Telegram API requires waiting due to rate limiting
    """
    session_file = f"{phone_number}.session"
    session_exists = os.path.exists(session_file)
    
    if session_exists:
        print(f"‚úì –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_file}")
        print("  –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
    else:
        print(f"‚úó –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {session_file}")
        print("  –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
    
    try:
        # Connect to Telegram
        await client.connect()
        
        # Check if already authorized
        if await client.is_user_authorized():
            print("‚úì –°–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞! –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            me = await client.get_me()
            print(f"‚úì –í–æ—à–ª–∏ –∫–∞–∫: {me.first_name} {me.last_name or ''} (@{me.username or 'no username'})")
            return me
        
        # Need to authorize
        print("‚ö† –°–µ—Å—Å–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        print("  –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç Telegram...")
        
        # This will prompt for code if session is invalid
        await client.start(phone=phone_number)
        me = await client.get_me()
        print(f"‚úì –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫: {me.first_name} {me.last_name or ''}")
        return me
        
    except FloodWaitError as e:
        wait_time_seconds = e.seconds
        wait_time_hours = wait_time_seconds / 3600
        wait_time_minutes = (wait_time_seconds % 3600) / 60
        
        print(f"\n{'='*70}")
        print(f"‚ö†Ô∏è  TELEGRAM API RATE LIMIT ERROR")
        print(f"{'='*70}")
        print(f"\nTelegram —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π –≤—Ö–æ–¥–∞.")
        print(f"\n–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è:")
        print(f"  ‚Ä¢ {wait_time_seconds} —Å–µ–∫—É–Ω–¥")
        print(f"  ‚Ä¢ ~{wait_time_hours:.1f} —á–∞—Å–æ–≤ {wait_time_minutes:.0f} –º–∏–Ω—É—Ç")
        print(f"\n–ü—Ä–∏—á–∏–Ω–∞: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        print(f"\n–†–µ—à–µ–Ω–∏–µ:")
        print(f"  1. –ü–æ–¥–æ–∂–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
        print(f"  2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ ~{wait_time_hours:.1f} —á–∞—Å–æ–≤")
        print(f"  3. –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –≤—Ö–æ–¥–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è")
        print(f"\nüí° –°–æ–≤–µ—Ç: –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω–∞—è —Å–µ—Å—Å–∏—è, –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å")
        print(f"   –≤ —Ç–æ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞—Å—Ç")
        print(f"   –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–æ–¥–∞.")
        print(f"\n{'='*70}\n")
        raise

